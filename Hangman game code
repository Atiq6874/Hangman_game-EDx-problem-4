# Hangman game
#

# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)

import random

WORDLIST_FILENAME = "words.txt"

def loadWords():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist

def chooseWord(wordlist):
    """
    wordlist (list): list of words (strings)

    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code
# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = loadWords()

def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    var1= list(secretWord)
    new_list = []
    for char in var1:
        if char in lettersGuessed:
            new_list.append(char)  #putting the common words into a new list to compare
        else:
            pass
    if new_list == var1:
        return True
    else:
        return  False



def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
 #don't even have to use list as not comparing lists but can just use tuple
    new_tuple = ""
    for char in secretWord:
        if char in lettersGuessed:
            new_tuple +=char      
        else:
            new_tuple += ('_ ')
    return new_tuple



def getAvailableLetters(lettersGuessed):
    '''
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters that represents what letters have not
      yet been guessed.
    '''
    import string 
    var1 = string.ascii_lowercase
    
    for char in lettersGuessed:
        if char in var1:
            var1 = var1.replace(char,'') #replace the char with empty space
        else:
            pass
    return var1

    

def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''
    
    guess_left = 8 #update the guess everytime the user gets a guess wrong. But if a user guesses the same letter again ,guesses remain the smae

    lettersGuessed ='' #tuple for letters that have been guessed so far
    
    print ('Welcome to the game, Hangman!')
    print ('I am thinking of a word that is ' + str(len(secretWord)) + ' letters long.')
    print ('------------')
    while guess_left>=0 or isWordGuessed(secretWord,lettersGuessed) is False:
        
        print ('You have ' + str(guess_left) + ' guesses left')
        
        print ('Available letters: ' + getAvailableLetters(lettersGuessed)) #don't have to assign a var since my lettersguessed is updating throughtout the loop 
        guess = str(input('Please guess a letter: ')).lower()
        
        if guess in secretWord:
            if guess in lettersGuessed:
                
                print ("Oops! You've already guessed that letter:" + getGuessedWord(secretWord,lettersGuessed)) 
                print ('------------')
             
                
            else:
                lettersGuessed += str(guess)
                print ('Good guess: ' + getGuessedWord(secretWord,lettersGuessed))
                print ('------------')
        elif guess not in getAvailableLetters(lettersGuessed):
            print ("Oops! You've already guessed that letter:" + getGuessedWord(secretWord,lettersGuessed)) 
            print ('------------')
            
        
        else:
                lettersGuessed += str(guess)
                guess_left -= 1
                print ('Oops! That letter is not in my word: ' + getGuessedWord(secretWord, lettersGuessed))
                print ('------------')
            
            
            
        if guess_left <=0:
            
            print ('Sorry, you ran out of guesses. The word was ' + str(secretWord) )
            break


        else:
            
            if isWordGuessed(secretWord, lettersGuessed) is True:
                print ('Congratulations, you won!')         
                break
              
        
            
            
                
                
                
            
        
        
        
        
        
        
                           
                        
                
    

    
    






# When you've completed your hangman function, uncomment these two lines
# and run this file to test! (hint: you might want to pick your own
# secretWord while you're testing)

secretWord = chooseWord(wordlist).lower()
hangman('else')
